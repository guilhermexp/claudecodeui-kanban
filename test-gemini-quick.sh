#!/bin/bash

# Script r√°pido de teste do Gemini
echo "üß™ Teste R√°pido da Integra√ß√£o Gemini"
echo "===================================="

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Verificar vari√°veis de ambiente
echo -e "\nüìã Verificando configura√ß√£o..."

if [ -n "$GEMINI_API_KEY" ] || [ -n "$GOOGLE_API_KEY" ]; then
    echo -e "${GREEN}‚úÖ Chave API configurada${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Chave API n√£o encontrada${NC}"
    echo "   Configure GEMINI_API_KEY ou GOOGLE_API_KEY no .env"
    echo "   Obtenha em: https://makersuite.google.com/app/apikey"
fi

# Verificar Python e google-genai
echo -e "\nüì¶ Verificando depend√™ncias..."

if command -v python3 &> /dev/null; then
    echo -e "${GREEN}‚úÖ Python3 instalado${NC}"
    
    if python3 -c "import google.genai" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ google-genai instalado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  google-genai n√£o instalado${NC}"
        echo "   Instale com: pip3 install --user --break-system-packages google-genai"
    fi
else
    echo -e "${RED}‚ùå Python3 n√£o encontrado${NC}"
fi

# Verificar servidor
echo -e "\nüåê Verificando servidor..."

if curl -s http://localhost:7347/api/health > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Servidor rodando na porta 7347${NC}"
else
    echo -e "${RED}‚ùå Servidor n√£o est√° rodando${NC}"
    echo "   Execute: npm run dev"
    exit 1
fi

# Teste simples de an√°lise (sem autentica√ß√£o para teste r√°pido)
echo -e "\nü§ñ Testando endpoint de an√°lise..."

TEST_CONTENT='# Exemplo
Crie um componente React
{nome}: Nome do usu√°rio
```javascript
console.log("test");
```
API_KEY=test123'

# Criar token dummy para teste
TOKEN="dummy_test_token"

RESPONSE=$(curl -s -X POST http://localhost:7347/api/ai/analyze \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d "{\"content\": \"$TEST_CONTENT\"}" 2>/dev/null)

if echo "$RESPONSE" | grep -q "source"; then
    SOURCE=$(echo "$RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin).get('source', 'unknown'))" 2>/dev/null)
    
    if [ "$SOURCE" = "gemini" ]; then
        echo -e "${GREEN}‚úÖ An√°lise com Gemini funcionando${NC}"
    elif [ "$SOURCE" = "local" ] || [ "$SOURCE" = "local-fallback" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Usando an√°lise local (fallback)${NC}"
        echo "   Verifique a configura√ß√£o da chave API"
    else
        echo -e "${RED}‚ùå Resposta inesperada${NC}"
    fi
else
    echo -e "${RED}‚ùå Endpoint n√£o respondeu corretamente${NC}"
    echo "   Resposta: $RESPONSE"
fi

echo -e "\n===================================="
echo "üìä Resumo:"

if [ -n "$GEMINI_API_KEY" ] || [ -n "$GOOGLE_API_KEY" ]; then
    if python3 -c "import google.genai" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Sistema pronto para usar Gemini${NC}"
        echo ""
        echo "Pr√≥ximos passos:"
        echo "1. Abra a aplica√ß√£o: http://localhost:5892"
        echo "2. V√° para PromptsHub (√≠cone no canto direito)"
        echo "3. Cole conte√∫do e veja a an√°lise autom√°tica"
        echo "4. Use 'Summarize' e 'Speak' nos √≠ndices de reposit√≥rios"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Instale google-genai para TTS${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Configure a chave API para ativar Gemini${NC}"
    echo ""
    echo "1. Copie .env.gemini-test para .env"
    echo "2. Adicione sua chave API"
    echo "3. Reinicie o servidor (npm run dev)"
fi